#!/usr/bin/python

# forked from Juliano Martinez (http://github.com/ncode/logix)
# gevent based syslog/amqp(via kombu) bridge

from gevent import monkey
monkey.patch_all()

import os
import re
import pwd
import sys
import math
import time
import gevent
import getopt
import logging
import ConfigParser
from supay import Daemon
from gevent import socket
from kombu import Exchange, Queue
from kombu import BrokerConnection
from kombu.common import maybe_declare
from kombu.pools import producers, connections

hostname = os.uname()[1]
severity = ['emerg', 'alert', 'crit', 'err', 'warn', 'notice', 'info', 'debug']
facility = ['kern', 'user', 'mail', 'daemon', 'auth', 'syslog', 'lpr', 'news', 'uucp', 
            'cron', 'authpriv', 'ftp', 'ntp', 'audit', 'alert', 'at', 'local0', 'local1', 
            'local2', 'local3', 'local4', 'local5', 'local6', 'local7']

fs_match = re.compile("<(.+)>([A-Z]{3} .*)", re.I)

def parse_and_queue_datagram(line, host, queue, connection):
    parsed = {}
    (fac, sev, parsed['line']) = _calc_lvl(line.strip())
    parsed['host'] = host if not '127.0.0.1' in host else hostname
    parsed['timestamp'] = time.time()
    parsed['facility'] = fac
    parsed['level'] = sev
    parsed['version'] = '1.0'
    parsed['short_message'] = "%s" % (parsed['line'])

    with connections[connection].acquire(block=True) as conn:
        with conn.SimpleQueue(queue) as queue:
            queue.put(parsed, serializer="json")

def _calc_lvl(line):
    lvl = fs_match.split(line)
    if lvl and len(lvl) > 1:
        i = int(lvl[1])
        fac = int(math.floor(i / 8))
        sev = i - (fac * 8)
        return (facility[fac].capitalize(), sev, lvl[2])
    return (None, None, lvl[2])

def main():
    os.setuid(pwd.getpwnam('logix')[3])
    logging.info("Starting Logix")
    config_file = '/etc/logix/logix.conf' if os.path.isfile('/etc/logix/logix.conf') else os.getenv('LOGIX_CONF')
    if not os.path.isfile(config_file):
        logging.error("Config file %s not found" % config_file)
        sys.exit(1)

    config = ConfigParser.RawConfigParser()
    config.read(config_file)

    # config.getint('transport', 'connection_pool_size')
    connection = BrokerConnection(config.get('transport','url')) 
    connection.connect()

    s = socket.socket(family=socket.AF_INET, type=socket.SOCK_DGRAM, proto=socket.IPPROTO_UDP)
    s.bind(('',config.getint('server', 'port')))

    while True:
        data, peer = s.recvfrom(config.getint('server', 'max_syslog_line_size') - 1)
        logging.debug("New data: %s" % data)
        gevent.spawn(parse_and_queue_datagram, data, peer, config.get('transport', 'queue'), connection)

if __name__ == '__main__':
    try:
        opts, args = getopt.getopt(sys.argv[1:], "a:", ["action="])
    except getopt.GetoptError, err:
        print str(err)

    action = 'start'
    for o, a in opts:
        if o in ('-a', '--action'):
            action = a

    daemon = Daemon(name='loggix', catch_all_log="/var/log/logix.log")
    if action == 'start':
        daemon.start()
        main()
    elif action == 'status':
        daemon.status()
    elif action == 'stop':
        daemon.stop()
