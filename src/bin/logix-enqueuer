#!/usr/bin/python

# Juliano G. Martinez 
# based on : https://github.com/gleicon/restmq/blob/master/src/restmq/syslogd.py by Gleicon
# and another code made by Francisco Freire

import os
import re 
import sys 
import math
import time
import ConfigParser
from twisted.python import log
from twisted.internet import reactor
from twisted.internet import threads
from twisted.python import threadable
from twisted.internet.protocol import DatagramProtocol

threadable.init(1)
reactor.suggestThreadPoolSize(64)

severity = ['emerg', 'alert', 'crit', 'err', 'warn', 'notice', 'info', 'debug']
facility = ['kern', 'user', 'mail', 'daemon', 'auth', 'syslog', 'lpr', 'news', 'uucp', 
            'cron', 'authpriv', 'ftp', 'ntp', 'audit', 'alert', 'at', 'local0', 'local1', 
            'local2', 'local3', 'local4', 'local5', 'local6', 'local7']

fs_match = re.compile("<(.+)>(.*)", re.I)
class UDPSyslogServer(DatagramProtocol):
    def parseDatagram(self, datagram):
        parsed = {}
        parsed['line'] = datagram.strip()
        parsed['id'] = hashlib.sha256(parsed['line'])
        (fac, sev) = self._calc_lvl(parsed['line'])
        parsed['host'] = self.transport.getHost().host
        parsed['tstamp'] = time.time()
        parsed['facility'] = fac
        parsed['severity'] = sev
        self.put(parsed)

    def put(self, parsed):
        name = config.get('queue')
        plugin = __import__('', '', name)
        
        pass

    def _calc_lvl(self, line):
        lvl = fs_match.split(line)
        if lvl and len(lvl) > 1:
            i = int(lvl[1])
            fac = int(math.floor(i / 8))
            sev = i - (fac * 8)
            return (facility[fac], severity[sev])
        return (None, None)

    def datagramReceived(self, datagram, address):
        self.transport.write(datagram, address)
        reactor.callInThread(self.parseDatagram, datagram)

if __name__ == '__main__':
    global config

    config_file = '/etc/logix/enqueuer.cfg'
    if not os.path.isfile(config_file):
        print "Problem: %s not found" % config_file
        sys.exit(1)

    config = ConfigParser.RawConfigParser()
    config.read(config_file)

    log.startLogging(sys.stdout)
    reactor.listenUDP(8000, UDPSyslogServer())
    reactor.run()
